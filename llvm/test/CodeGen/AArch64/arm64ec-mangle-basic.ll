; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=arm64ec-pc-windows-msvc < %s | FileCheck %s

@pfnbool = global ptr null, align 8
@pfnchar = global ptr null, align 8
@pfnshort = global ptr null, align 8
@pfnwchar_t = global ptr null, align 8
@pfnint = global ptr null, align 8
@pfni64 = global ptr null, align 8
@pfnfloat = global ptr null, align 8
@pfndouble = global ptr null, align 8
@pfnlongdouble = global ptr null, align 8
@pfnVOIDP = global ptr null, align 8


define dso_local i1 @callbool(i1 %x) {
; CHECK-LABEL: callbool:
; CHECK:       .seh_proc callbool
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnbool
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnbool]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnbool, align 8
  %call = tail call i1 %0(i1 %x)
  ret i1 %call
}


define dso_local i8 @callchar(i8 %x) {
; CHECK-LABEL: callchar:
; CHECK:       .seh_proc callchar
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnchar
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.1)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.1)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnchar]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnchar, align 8
  %call = tail call i8 %0(i8 %x)
  ret i8 %call
}


define dso_local i16 @callshort(i16 %x) {
; CHECK-LABEL: callshort:
; CHECK:       .seh_proc callshort
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnshort
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.2)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.2)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnshort]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnshort, align 8
  %call = tail call i16 %0(i16 %x)
  ret i16 %call
}


define dso_local i16 @callwchar_t(i16 %x) {
; CHECK-LABEL: callwchar_t:
; CHECK:       .seh_proc callwchar_t
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnwchar_t
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.3)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.3)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnwchar_t]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnwchar_t, align 8
  %call = tail call i16 %0(i16 %x)
  ret i16 %call
}


define dso_local i32 @callint(i32 %x) {
; CHECK-LABEL: callint:
; CHECK:       .seh_proc callint
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnint
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.4)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.4)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnint]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnint, align 8
  %call = tail call i32 %0(i32 %x)
  ret i32 %call
}


define dso_local i64 @calli64(i64 %x) {
; CHECK-LABEL: calli64:
; CHECK:       .seh_proc calli64
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfni64
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.5)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.5)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfni64]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfni64, align 8
  %call = tail call i64 %0(i64 %x)
  ret i64 %call
}


define dso_local float @callfloat(float %x) {
; CHECK-LABEL: callfloat:
; CHECK:       .seh_proc callfloat
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnfloat
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$f$f)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$f$f)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnfloat]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnfloat, align 8
  %call = tail call float %0(float %x)
  ret float %call
}


define dso_local double @calldouble(double %x) {
; CHECK-LABEL: calldouble:
; CHECK:       .seh_proc calldouble
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfndouble
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$d$d)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$d$d)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfndouble]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfndouble, align 8
  %call = tail call double %0(double %x)
  ret double %call
}


define dso_local double @calllongdouble(double %x) {
; CHECK-LABEL: calllongdouble:
; CHECK:       .seh_proc calllongdouble
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnlongdouble
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$d$d.6)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$d$d.6)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnlongdouble]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnlongdouble, align 8
  %call = tail call double %0(double %x)
  ret double %call
}


define dso_local ptr @callVOIDP(ptr %x) {
; CHECK-LABEL: callVOIDP:
; CHECK:       .seh_proc callVOIDP
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, pfnVOIDP
; CHECK-NEXT:    adrp x9, __os_arm64x_check_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$i8.7)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$i8.7)
; CHECK-NEXT:    ldr x11, [x8, :lo12:pfnVOIDP]
; CHECK-NEXT:    ldr x8, [x9, :lo12:__os_arm64x_check_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    br x11
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
entry:
  %0 = load ptr, ptr @pfnVOIDP, align 8
  %call = tail call ptr %0(ptr %x)
  ret ptr %call
}
