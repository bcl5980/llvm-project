; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: llc -mtriple=arm64ec-pc-windows-msvc < %s | FileCheck %s

define void @f(ptr %g) {
entry:
  call void %g()
  ret void
}

define void @f2(ptr %g) {
entry:
  call void %g(i32 1, i32 2, i32 3, i32 4, i32 5)
  ret void
}

define void @f3(ptr %g) {
entry:
  call void %g([4 x float] zeroinitializer)
  ret void
}

define [2 x i64] @f4(ptr %g) {
entry:
  %r = call arm64ec_argsize(16) [2 x i64] %g([4 x float] zeroinitializer)
  ret [2 x i64] %r
}

define void @fvar(ptr %g) {
entry:
  call void (i32, ...) %g(i32 4, i32 5, i32 6, i32 8)
  ret void
}

define i32 @fvar2(ptr %g) {
entry:
  %r = call i32 (i32, ...) %g(i32 4, i32 5, i32 6, i32 8, i32 7, i32 9)
  ret i32 %r
}

define [2 x i64] @fvar3(ptr %g) {
entry:
  %r = call [2 x i64] (i32, ...) %g(i32 4, i32 5, i32 6, i32 8, i32 7, i32 9)
  ret [2 x i64] %r
}

%struct.s17 = type { [17 x i8] }
define arm64ec_argsize(17) void @fvar4(ptr sret(%struct.s17) align 1 %agg.result, ptr %g) {
entry:
  call arm64ec_argsize(17) void (ptr, i32, ...) %g(ptr sret(%struct.s17) align 1 %agg.result, i32 4, i32 5, i32 6, i32 8, i32 7, i32 9)
  ret void
}

; CHECK-LABEL: "#f":
; CHECK:       .seh_proc "#f"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$v$v)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$v$v)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#f2":
; CHECK:       .seh_proc "#f2"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$v$i8i8i8i8i8)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$v$i8i8i8i8i8)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    mov w1, #2
; CHECK-NEXT:    mov w2, #3
; CHECK-NEXT:    mov w3, #4
; CHECK-NEXT:    mov w4, #5
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#f3":
; CHECK:       .seh_proc "#f3"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$v$F16)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$v$F16)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    movi d0, #0000000000000000
; CHECK-NEXT:    movi d1, #0000000000000000
; CHECK-NEXT:    movi d2, #0000000000000000
; CHECK-NEXT:    movi d3, #0000000000000000
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#f4":
; CHECK:       .seh_proc "#f4"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$m16$F16)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$m16$F16)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    movi d0, #0000000000000000
; CHECK-NEXT:    movi d1, #0000000000000000
; CHECK-NEXT:    movi d2, #0000000000000000
; CHECK-NEXT:    movi d3, #0000000000000000
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#fvar":
; CHECK:       .seh_proc "#fvar"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$v$varargs)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$v$varargs)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    mov w0, #4
; CHECK-NEXT:    mov w1, #5
; CHECK-NEXT:    mov w2, #6
; CHECK-NEXT:    mov w3, #8
; CHECK-NEXT:    mov x4, sp
; CHECK-NEXT:    mov x5, xzr
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x30, 16
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#fvar2":
; CHECK:       .seh_proc "#fvar2"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$i8$varargs)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$i8$varargs)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    mov x4, sp
; CHECK-NEXT:    mov w8, #9
; CHECK-NEXT:    mov w9, #7
; CHECK-NEXT:    mov w0, #4
; CHECK-NEXT:    mov w1, #5
; CHECK-NEXT:    mov w2, #6
; CHECK-NEXT:    mov w3, #8
; CHECK-NEXT:    mov w5, #16
; CHECK-NEXT:    str w8, [sp, #8]
; CHECK-NEXT:    str w9, [sp]
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#fvar3":
; CHECK:       .seh_proc "#fvar3"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$m16$varargs)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$m16$varargs)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x8, [x8, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    mov x4, sp
; CHECK-NEXT:    mov w8, #9
; CHECK-NEXT:    mov w9, #7
; CHECK-NEXT:    mov w0, #4
; CHECK-NEXT:    mov w1, #5
; CHECK-NEXT:    mov w2, #6
; CHECK-NEXT:    mov w3, #8
; CHECK-NEXT:    mov w5, #16
; CHECK-NEXT:    str w8, [sp, #8]
; CHECK-NEXT:    str w9, [sp]
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: "#fvar4":
; CHECK:       .seh_proc "#fvar4"
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x9, __os_arm64x_dispatch_icall
; CHECK-NEXT:    adrp x10, ($iexit_thunk$cdecl$m17$varargs)
; CHECK-NEXT:    add x10, x10, :lo12:($iexit_thunk$cdecl$m17$varargs)
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    ldr x9, [x9, :lo12:__os_arm64x_dispatch_icall]
; CHECK-NEXT:    blr x9
; CHECK-NEXT:    mov x4, sp
; CHECK-NEXT:    mov w9, #9
; CHECK-NEXT:    mov w10, #7
; CHECK-NEXT:    mov w0, #4
; CHECK-NEXT:    mov w1, #5
; CHECK-NEXT:    mov w2, #6
; CHECK-NEXT:    mov w3, #8
; CHECK-NEXT:    mov w5, #16
; CHECK-NEXT:    str w9, [sp, #8]
; CHECK-NEXT:    str w10, [sp]
; CHECK-NEXT:    blr x11
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg x30, 16
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    .seh_stackalloc 32
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $ientry_thunk$cdecl$v$i8:
; CHECK:       .seh_proc $ientry_thunk$cdecl$v$i8
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x29, x30, [sp, #-176]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    stp q6, q7, [sp, #16] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    stp q8, q9, [sp, #48] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    stp q10, q11, [sp, #80] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    stp q12, q13, [sp, #112] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    stp q14, q15, [sp, #144] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    .seh_set_fp
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    blr x9
; CHECK-NEXT:    //APP
; CHECK-NEXT:    //NO_APP
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp q14, q15, [sp, #144] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    ldp q12, q13, [sp, #112] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    ldp q10, q11, [sp, #80] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    ldp q8, q9, [sp, #48] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    ldp q6, q7, [sp, #16] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    ldp x29, x30, [sp], #176 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    adrp x16, __os_arm64x_dispatch_ret
; CHECK-NEXT:    ldr x16, [x16, :lo12:__os_arm64x_dispatch_ret]
; CHECK-NEXT:    br x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$v$v:
; CHECK:       .seh_proc $iexit_thunk$cdecl$v$v
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .seh_stackalloc 48
; CHECK-NEXT:    stp x29, x30, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 32
; CHECK-NEXT:    add x29, sp, #32
; CHECK-NEXT:    .seh_add_fp 32
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    ldr x16, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp x29, x30, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 32
; CHECK-NEXT:    add sp, sp, #48
; CHECK-NEXT:    .seh_stackalloc 48
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$v$i8i8i8i8i8:
; CHECK:       .seh_proc $iexit_thunk$cdecl$v$i8i8i8i8i8
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    sub sp, sp, #64
; CHECK-NEXT:    .seh_stackalloc 64
; CHECK-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add x29, sp, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    str x4, [sp, #32]
; CHECK-NEXT:    ldr x16, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add sp, sp, #64
; CHECK-NEXT:    .seh_stackalloc 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$v$F16:
; CHECK:       .seh_proc $iexit_thunk$cdecl$v$F16
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    sub sp, sp, #64
; CHECK-NEXT:    .seh_stackalloc 64
; CHECK-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add x29, sp, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    stp s1, s2, [x29, #-12]
; CHECK-NEXT:    stur s0, [x29, #-16]
; CHECK-NEXT:    ldr x16, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    stur s3, [x29, #-4]
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add sp, sp, #64
; CHECK-NEXT:    .seh_stackalloc 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $ientry_thunk$cdecl$m16$i8:
; CHECK:       .seh_proc $ientry_thunk$cdecl$m16$i8
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x29, x30, [sp, #-176]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    stp q6, q7, [sp, #16] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    stp q8, q9, [sp, #48] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    stp q10, q11, [sp, #80] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    stp q12, q13, [sp, #112] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    stp q14, q15, [sp, #144] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    .seh_set_fp
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    blr x9
; CHECK-NEXT:    //APP
; CHECK-NEXT:    //NO_APP
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp q14, q15, [sp, #144] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    ldp q12, q13, [sp, #112] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    ldp q10, q11, [sp, #80] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    ldp q8, q9, [sp, #48] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    ldp q6, q7, [sp, #16] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    ldp x29, x30, [sp], #176 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    adrp x16, __os_arm64x_dispatch_ret
; CHECK-NEXT:    ldr x16, [x16, :lo12:__os_arm64x_dispatch_ret]
; CHECK-NEXT:    br x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$m16$F16:
; CHECK:       .seh_proc $iexit_thunk$cdecl$m16$F16
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    sub sp, sp, #80
; CHECK-NEXT:    .seh_stackalloc 80
; CHECK-NEXT:    stp x29, x30, [sp, #64] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 64
; CHECK-NEXT:    add x29, sp, #64
; CHECK-NEXT:    .seh_add_fp 64
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    add x1, sp, #32
; CHECK-NEXT:    stp s1, s2, [sp, #36]
; CHECK-NEXT:    str s0, [sp, #32]
; CHECK-NEXT:    ldr x16, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    str s3, [sp, #44]
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    ldp x0, x1, [x29, #-16]
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp x29, x30, [sp, #64] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 64
; CHECK-NEXT:    add sp, sp, #80
; CHECK-NEXT:    .seh_stackalloc 80
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$v$varargs:
; CHECK:       .seh_proc $iexit_thunk$cdecl$v$varargs
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x19, x20, [sp, #-64]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    stp x21, x22, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    stp x25, x26, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add x29, sp, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    mov x19, x3
; CHECK-NEXT:    mov x20, x2
; CHECK-NEXT:    mov x21, x1
; CHECK-NEXT:    mov x22, x0
; CHECK-NEXT:    mov x25, x9
; CHECK-NEXT:    ldr x26, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    add x8, x5, #47
; CHECK-NEXT:    lsr x15, x8, #4
; CHECK-NEXT:    bl __chkstk_arm64ec
; CHECK-NEXT:    sub x8, sp, x15, lsl #4
; CHECK-NEXT:    add x0, x8, #32
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    mov x1, x4
; CHECK-NEXT:    mov x2, x5
; CHECK-NEXT:    bl "#memcpy"
; CHECK-NEXT:    mov x0, x22
; CHECK-NEXT:    mov x1, x21
; CHECK-NEXT:    mov x2, x20
; CHECK-NEXT:    mov x3, x19
; CHECK-NEXT:    mov x9, x25
; CHECK-NEXT:    mov x16, x26
; CHECK-NEXT:    fmov d0, x0
; CHECK-NEXT:    fmov d1, x1
; CHECK-NEXT:    fmov d2, x2
; CHECK-NEXT:    fmov d3, x3
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    sub sp, x29, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    ldp x25, x26, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    ldp x21, x22, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    ldp x19, x20, [sp], #64 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $ientry_thunk$cdecl$i8$i8:
; CHECK:       .seh_proc $ientry_thunk$cdecl$i8$i8
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x29, x30, [sp, #-176]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    stp q6, q7, [sp, #16] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    stp q8, q9, [sp, #48] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    stp q10, q11, [sp, #80] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    stp q12, q13, [sp, #112] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    stp q14, q15, [sp, #144] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    .seh_set_fp
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    blr x9
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    //APP
; CHECK-NEXT:    //NO_APP
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp q14, q15, [sp, #144] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q14, 144
; CHECK-NEXT:    ldp q12, q13, [sp, #112] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q12, 112
; CHECK-NEXT:    ldp q10, q11, [sp, #80] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q10, 80
; CHECK-NEXT:    ldp q8, q9, [sp, #48] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q8, 48
; CHECK-NEXT:    ldp q6, q7, [sp, #16] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q6, 16
; CHECK-NEXT:    ldp x29, x30, [sp], #176 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr_x 176
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    adrp x16, __os_arm64x_dispatch_ret
; CHECK-NEXT:    ldr x16, [x16, :lo12:__os_arm64x_dispatch_ret]
; CHECK-NEXT:    br x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$i8$varargs:
; CHECK:       .seh_proc $iexit_thunk$cdecl$i8$varargs
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x19, x20, [sp, #-64]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    stp x21, x22, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    stp x25, x26, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add x29, sp, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    mov x19, x3
; CHECK-NEXT:    mov x20, x2
; CHECK-NEXT:    mov x21, x1
; CHECK-NEXT:    mov x22, x0
; CHECK-NEXT:    mov x25, x9
; CHECK-NEXT:    ldr x26, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    add x8, x5, #47
; CHECK-NEXT:    lsr x15, x8, #4
; CHECK-NEXT:    bl __chkstk_arm64ec
; CHECK-NEXT:    sub x8, sp, x15, lsl #4
; CHECK-NEXT:    add x0, x8, #32
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    mov x1, x4
; CHECK-NEXT:    mov x2, x5
; CHECK-NEXT:    bl "#memcpy"
; CHECK-NEXT:    mov x0, x22
; CHECK-NEXT:    mov x1, x21
; CHECK-NEXT:    mov x2, x20
; CHECK-NEXT:    mov x3, x19
; CHECK-NEXT:    mov x9, x25
; CHECK-NEXT:    mov x16, x26
; CHECK-NEXT:    fmov d0, x0
; CHECK-NEXT:    fmov d1, x1
; CHECK-NEXT:    fmov d2, x2
; CHECK-NEXT:    fmov d3, x3
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    sub sp, x29, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    ldp x25, x26, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    ldp x21, x22, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    ldp x19, x20, [sp], #64 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$m16$varargs:
; CHECK:       .seh_proc $iexit_thunk$cdecl$m16$varargs
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x19, x20, [sp, #-64]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    stp x21, x22, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    str x25, [sp, #32] // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg x25, 32
; CHECK-NEXT:    stp x29, x30, [sp, #40] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 40
; CHECK-NEXT:    add x29, sp, #40
; CHECK-NEXT:    .seh_add_fp 40
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .seh_stackalloc 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    mov x19, x2
; CHECK-NEXT:    mov x20, x1
; CHECK-NEXT:    mov x21, x0
; CHECK-NEXT:    mov x22, x9
; CHECK-NEXT:    ldr x25, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    add x8, x5, #55
; CHECK-NEXT:    lsr x15, x8, #4
; CHECK-NEXT:    bl __chkstk_arm64ec
; CHECK-NEXT:    sub x8, sp, x15, lsl #4
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    add x0, x8, #40
; CHECK-NEXT:    mov x1, x4
; CHECK-NEXT:    mov x2, x5
; CHECK-NEXT:    str x3, [x8, #32]
; CHECK-NEXT:    bl "#memcpy"
; CHECK-NEXT:    sub x0, x29, #56
; CHECK-NEXT:    mov x1, x21
; CHECK-NEXT:    mov x2, x20
; CHECK-NEXT:    mov x3, x19
; CHECK-NEXT:    mov x9, x22
; CHECK-NEXT:    mov x16, x25
; CHECK-NEXT:    fmov d0, x0
; CHECK-NEXT:    fmov d1, x1
; CHECK-NEXT:    fmov d2, x2
; CHECK-NEXT:    fmov d3, x3
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    ldp x0, x1, [x29, #-56]
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    sub sp, x29, #40
; CHECK-NEXT:    .seh_add_fp 40
; CHECK-NEXT:    ldp x29, x30, [sp, #40] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 40
; CHECK-NEXT:    ldr x25, [sp, #32] // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg x25, 32
; CHECK-NEXT:    ldp x21, x22, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    ldp x19, x20, [sp], #64 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $ientry_thunk$cdecl$m17$i8:
; CHECK:       .seh_proc $ientry_thunk$cdecl$m17$i8
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    str x19, [sp, #-192]! // 8-byte Folded Spill
; CHECK-NEXT:    .seh_save_reg_x x19, 192
; CHECK-NEXT:    stp x29, x30, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 16
; CHECK-NEXT:    stp q6, q7, [sp, #32] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q6, 32
; CHECK-NEXT:    stp q8, q9, [sp, #64] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q8, 64
; CHECK-NEXT:    stp q10, q11, [sp, #96] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q10, 96
; CHECK-NEXT:    stp q12, q13, [sp, #128] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q12, 128
; CHECK-NEXT:    stp q14, q15, [sp, #160] // 32-byte Folded Spill
; CHECK-NEXT:    .seh_save_qregp q14, 160
; CHECK-NEXT:    add x29, sp, #16
; CHECK-NEXT:    .seh_add_fp 16
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    mov x0, x1
; CHECK-NEXT:    blr x9
; CHECK-NEXT:    mov x8, x19
; CHECK-NEXT:    //APP
; CHECK-NEXT:    //NO_APP
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    ldp q14, q15, [sp, #160] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q14, 160
; CHECK-NEXT:    ldp q12, q13, [sp, #128] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q12, 128
; CHECK-NEXT:    ldp q10, q11, [sp, #96] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q10, 96
; CHECK-NEXT:    ldp q8, q9, [sp, #64] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q8, 64
; CHECK-NEXT:    ldp q6, q7, [sp, #32] // 32-byte Folded Reload
; CHECK-NEXT:    .seh_save_qregp q6, 32
; CHECK-NEXT:    ldp x29, x30, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 16
; CHECK-NEXT:    ldr x19, [sp], #192 // 8-byte Folded Reload
; CHECK-NEXT:    .seh_save_reg_x x19, 192
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    adrp x16, __os_arm64x_dispatch_ret
; CHECK-NEXT:    ldr x16, [x16, :lo12:__os_arm64x_dispatch_ret]
; CHECK-NEXT:    br x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
;
; CHECK-LABEL: $iexit_thunk$cdecl$m17$varargs:
; CHECK:       .seh_proc $iexit_thunk$cdecl$m17$varargs
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    stp x19, x20, [sp, #-64]! // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    stp x21, x22, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    stp x25, x26, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    add x29, sp, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    .seh_endprologue
; CHECK-NEXT:    mov x22, x8
; CHECK-NEXT:    adrp x8, __os_arm64x_dispatch_call_no_redirect
; CHECK-NEXT:    mov x19, x2
; CHECK-NEXT:    mov x20, x1
; CHECK-NEXT:    mov x21, x0
; CHECK-NEXT:    mov x25, x9
; CHECK-NEXT:    ldr x26, [x8, :lo12:__os_arm64x_dispatch_call_no_redirect]
; CHECK-NEXT:    add x8, x4, #47
; CHECK-NEXT:    lsr x15, x8, #4
; CHECK-NEXT:    bl __chkstk_arm64ec
; CHECK-NEXT:    sub x8, sp, x15, lsl #4
; CHECK-NEXT:    add x0, x8, #32
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    mov x1, x3
; CHECK-NEXT:    mov x2, x4
; CHECK-NEXT:    bl "#memcpy"
; CHECK-NEXT:    mov x0, x22
; CHECK-NEXT:    mov x1, x21
; CHECK-NEXT:    mov x2, x20
; CHECK-NEXT:    mov x3, x19
; CHECK-NEXT:    mov x9, x25
; CHECK-NEXT:    mov x16, x26
; CHECK-NEXT:    fmov d0, x0
; CHECK-NEXT:    fmov d1, x1
; CHECK-NEXT:    fmov d2, x2
; CHECK-NEXT:    fmov d3, x3
; CHECK-NEXT:    blr x16
; CHECK-NEXT:    .seh_startepilogue
; CHECK-NEXT:    sub sp, x29, #48
; CHECK-NEXT:    .seh_add_fp 48
; CHECK-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_fplr 48
; CHECK-NEXT:    ldp x25, x26, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x25, 32
; CHECK-NEXT:    ldp x21, x22, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp x21, 16
; CHECK-NEXT:    ldp x19, x20, [sp], #64 // 16-byte Folded Reload
; CHECK-NEXT:    .seh_save_regp_x x19, 64
; CHECK-NEXT:    .seh_endepilogue
; CHECK-NEXT:    ret
; CHECK-NEXT:    .seh_endfunclet
; CHECK-NEXT:    .seh_endproc
