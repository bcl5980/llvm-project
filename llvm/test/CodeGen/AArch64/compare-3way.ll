; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-unknown-unknown | FileCheck %s

define i1 @scmpare_i1_i32(i32 %a, i32 %b) {
; CHECK-LABEL: scmpare_i1_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
  %cmp = call i1 @llvm.scompare.i1.i32(i32 %a, i32 %b)
  ret i1 %cmp
}

define i1 @ucmpare_i1_i32(i32 %a, i32 %b) {
; CHECK-LABEL: ucmpare_i1_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
  %cmp = call i1 @llvm.ucompare.i1.i32(i32 %a, i32 %b)
  ret i1 %cmp
}

define i8 @scmpare_i8_i32(i32 %a, i32 %b) {
; CHECK-LABEL: scmpare_i8_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w8, lt
; CHECK-NEXT:    cset w9, gt
; CHECK-NEXT:    sub w0, w9, w8
; CHECK-NEXT:    ret
  %cmp = call i8 @llvm.scompare.i8.i32(i32 %a, i32 %b)
  ret i8 %cmp
}

define i8 @ucmpare_i8_i32(i32 %a, i32 %b) {
; CHECK-LABEL: ucmpare_i8_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w8, lo
; CHECK-NEXT:    cset w9, hi
; CHECK-NEXT:    sub w0, w9, w8
; CHECK-NEXT:    ret
  %cmp = call i8 @llvm.ucompare.i8.i32(i32 %a, i32 %b)
  ret i8 %cmp
}

define i32 @scmpare_i32_i64(i64 %a, i64 %b) {
; CHECK-LABEL: scmpare_i32_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w8, lt
; CHECK-NEXT:    cset w9, gt
; CHECK-NEXT:    sub w0, w9, w8
; CHECK-NEXT:    ret
  %cmp = call i32 @llvm.scompare.i32.i64(i64 %a, i64 %b)
  ret i32 %cmp
}

define i32 @ucmpare_i32_i64(i64 %a, i64 %b) {
; CHECK-LABEL: ucmpare_i32_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w8, lo
; CHECK-NEXT:    cset w9, hi
; CHECK-NEXT:    sub w0, w9, w8
; CHECK-NEXT:    ret
  %cmp = call i32 @llvm.ucompare.i32.i64(i64 %a, i64 %b)
  ret i32 %cmp
}

define i128 @scmpare_i128_i64(i64 %a, i64 %b) {
; CHECK-LABEL: scmpare_i128_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w8, lt
; CHECK-NEXT:    cset w9, gt
; CHECK-NEXT:    sub w8, w9, w8
; CHECK-NEXT:    sxtw x0, w8
; CHECK-NEXT:    asr x1, x0, #63
; CHECK-NEXT:    ret
  %cmp = call i128 @llvm.scompare.i128.i64(i64 %a, i64 %b)
  ret i128 %cmp
}

define i128 @ucmpare_i128_i64(i64 %a, i64 %b) {
; CHECK-LABEL: ucmpare_i128_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w8, lo
; CHECK-NEXT:    cset w9, hi
; CHECK-NEXT:    sub w8, w9, w8
; CHECK-NEXT:    sxtw x0, w8
; CHECK-NEXT:    asr x1, x0, #63
; CHECK-NEXT:    ret
  %cmp = call i128 @llvm.ucompare.i128.i64(i64 %a, i64 %b)
  ret i128 %cmp
}

define i128 @scmpare_i128_i128(i128 %a, i128 %b) {
; CHECK-LABEL: scmpare_i128_i128:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x2
; CHECK-NEXT:    sbcs xzr, x1, x3
; CHECK-NEXT:    cset w8, lt
; CHECK-NEXT:    cmp x2, x0
; CHECK-NEXT:    sbcs xzr, x3, x1
; CHECK-NEXT:    cset w9, lt
; CHECK-NEXT:    sub w8, w9, w8
; CHECK-NEXT:    sxtw x0, w8
; CHECK-NEXT:    asr x1, x0, #63
; CHECK-NEXT:    ret
  %cmp = call i128 @llvm.scompare.i128.i128(i128 %a, i128 %b)
  ret i128 %cmp
}

define i128 @ucmpare_i128_i128(i128 %a, i128 %b) {
; CHECK-LABEL: ucmpare_i128_i128:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, x2
; CHECK-NEXT:    sbcs xzr, x1, x3
; CHECK-NEXT:    cset w8, lo
; CHECK-NEXT:    cmp x2, x0
; CHECK-NEXT:    sbcs xzr, x3, x1
; CHECK-NEXT:    cset w9, lo
; CHECK-NEXT:    sub w8, w9, w8
; CHECK-NEXT:    sxtw x0, w8
; CHECK-NEXT:    asr x1, x0, #63
; CHECK-NEXT:    ret
  %cmp = call i128 @llvm.ucompare.i128.i128(i128 %a, i128 %b)
  ret i128 %cmp
}

define <4 x i32> @scmpare_4xi32_4xi64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: scmpare_4xi32_4xi64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmgt v4.2d, v3.2d, v1.2d
; CHECK-NEXT:    cmgt v1.2d, v1.2d, v3.2d
; CHECK-NEXT:    cmgt v3.2d, v2.2d, v0.2d
; CHECK-NEXT:    cmgt v0.2d, v0.2d, v2.2d
; CHECK-NEXT:    sub v1.2d, v1.2d, v4.2d
; CHECK-NEXT:    sub v0.2d, v0.2d, v3.2d
; CHECK-NEXT:    uzp1 v0.4s, v0.4s, v1.4s
; CHECK-NEXT:    ret
  %cmp = call <4 x i32> @llvm.scompare.v4i32.v4i64(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i32> %cmp
}

define <4 x i32> @ucmpare_4xi32_4xi64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: ucmpare_4xi32_4xi64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmhi v4.2d, v3.2d, v1.2d
; CHECK-NEXT:    cmhi v1.2d, v1.2d, v3.2d
; CHECK-NEXT:    cmhi v3.2d, v2.2d, v0.2d
; CHECK-NEXT:    cmhi v0.2d, v0.2d, v2.2d
; CHECK-NEXT:    sub v1.2d, v1.2d, v4.2d
; CHECK-NEXT:    sub v0.2d, v0.2d, v3.2d
; CHECK-NEXT:    uzp1 v0.4s, v0.4s, v1.4s
; CHECK-NEXT:    ret
  %cmp = call <4 x i32> @llvm.ucompare.v4i32.v4i64(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i32> %cmp
}

declare i1 @llvm.scompare.i1.i32(i32, i32)
declare i1 @llvm.ucompare.i1.i32(i32, i32)
declare i8 @llvm.scompare.i8.i32(i32, i32)
declare i8 @llvm.ucompare.i8.i32(i32, i32)
declare i32 @llvm.scompare.i32.i64(i64, i64)
declare i32 @llvm.ucompare.i32.i64(i64, i64)
declare i128 @llvm.scompare.i128.i64(i64, i64)
declare i128 @llvm.ucompare.i128.i64(i64, i64)
declare i128 @llvm.scompare.i128.i128(i128, i128)
declare i128 @llvm.ucompare.i128.i128(i128, i128)
declare <4 x i32> @llvm.scompare.v4i32.v4i64(<4 x i64>, <4 x i64>)
declare <4 x i32> @llvm.ucompare.v4i32.v4i64(<4 x i64>, <4 x i64>)

