; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=arm64_32-apple-ios7.0 %s -o - | FileCheck %s

define void @pass_pointer(i64 %in) {
; CHECK-LABEL: pass_pointer:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov w0, w0
; CHECK-NEXT:    bl _take_pointer
; CHECK-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; CHECK-NEXT:    ret

  %in32 = trunc i64 %in to i32
  %ptr = inttoptr i32 %in32 to i8*
  call i64 @take_pointer(i8* %ptr)
  ret void
}

define i64 @take_pointer(i8* %ptr) nounwind {
; CHECK-LABEL: take_pointer:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ret

  %val = ptrtoint i8* %ptr to i32
  %res = zext i32 %val to i64
  ret i64 %res
}

define i32 @callee_ptr_stack_slot([8 x i64], i8*, i32 %val) {
; CHECK-LABEL: callee_ptr_stack_slot:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    ldr w0, [sp, #4]
; CHECK-NEXT:    ret

  ret i32 %val
}

define void @caller_ptr_stack_slot(i8* %ptr) {
; CHECK-LABEL: caller_ptr_stack_slot:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov w8, #42
; CHECK-NEXT:    stp w0, w8, [sp]
; CHECK-NEXT:    bl _callee_ptr_stack_slot
; CHECK-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret

  call i32 @callee_ptr_stack_slot([8 x i64] undef, i8* %ptr, i32 42)
  ret void
}

define i8* @return_ptr(i64 %in, i64 %r) {
; CHECK-LABEL: return_ptr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sdiv x8, x0, x1
; CHECK-NEXT:    mov w0, w8
; CHECK-NEXT:    ret

  %sum = sdiv i64 %in, %r
  %sum32 = trunc i64 %sum to i32
  %res = inttoptr i32 %sum32 to i8*
  ret i8* %res
}
