; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

define i1 @scmpare_i1_i32(i32 %a, i32 %b) {
; CHECK-LABEL: scmpare_i1_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %cmp = call i1 @llvm.scompare.i1.i32(i32 %a, i32 %b)
  ret i1 %cmp
}

define i1 @ucmpare_i1_i32(i32 %a, i32 %b) {
; CHECK-LABEL: ucmpare_i1_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %cmp = call i1 @llvm.ucompare.i1.i32(i32 %a, i32 %b)
  ret i1 %cmp
}

define i8 @scmpare_i8_i32(i32 %a, i32 %b) {
; CHECK-LABEL: scmpare_i8_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    setl %cl
; CHECK-NEXT:    setg %al
; CHECK-NEXT:    subb %cl, %al
; CHECK-NEXT:    retq
  %cmp = call i8 @llvm.scompare.i8.i32(i32 %a, i32 %b)
  ret i8 %cmp
}

define i8 @ucmpare_i8_i32(i32 %a, i32 %b) {
; CHECK-LABEL: ucmpare_i8_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpl %esi, %edi
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    sbbb $0, %al
; CHECK-NEXT:    retq
  %cmp = call i8 @llvm.ucompare.i8.i32(i32 %a, i32 %b)
  ret i8 %cmp
}

define i32 @scmpare_i32_i64(i64 %a, i64 %b) {
; CHECK-LABEL: scmpare_i32_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rsi, %rdi
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    setg %cl
; CHECK-NEXT:    subb %al, %cl
; CHECK-NEXT:    movsbl %cl, %eax
; CHECK-NEXT:    retq
  %cmp = call i32 @llvm.scompare.i32.i64(i64 %a, i64 %b)
  ret i32 %cmp
}

define i32 @ucmpare_i32_i64(i64 %a, i64 %b) {
; CHECK-LABEL: ucmpare_i32_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rsi, %rdi
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    sbbb $0, %al
; CHECK-NEXT:    movsbl %al, %eax
; CHECK-NEXT:    retq
  %cmp = call i32 @llvm.ucompare.i32.i64(i64 %a, i64 %b)
  ret i32 %cmp
}

define i128 @scmpare_i128_i64(i64 %a, i64 %b) {
; CHECK-LABEL: scmpare_i128_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rsi, %rdi
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    setg %cl
; CHECK-NEXT:    subb %al, %cl
; CHECK-NEXT:    movsbq %cl, %rax
; CHECK-NEXT:    movq %rax, %rdx
; CHECK-NEXT:    sarq $63, %rdx
; CHECK-NEXT:    retq
  %cmp = call i128 @llvm.scompare.i128.i64(i64 %a, i64 %b)
  ret i128 %cmp
}

define i128 @ucmpare_i128_i64(i64 %a, i64 %b) {
; CHECK-LABEL: ucmpare_i128_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rsi, %rdi
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    sbbb $0, %al
; CHECK-NEXT:    movsbq %al, %rax
; CHECK-NEXT:    movq %rax, %rdx
; CHECK-NEXT:    sarq $63, %rdx
; CHECK-NEXT:    retq
  %cmp = call i128 @llvm.ucompare.i128.i64(i64 %a, i64 %b)
  ret i128 %cmp
}

define i128 @scmpare_i128_i128(i128 %a, i128 %b) {
; CHECK-LABEL: scmpare_i128_i128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rdx, %rdi
; CHECK-NEXT:    movq %rsi, %rax
; CHECK-NEXT:    sbbq %rcx, %rax
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    cmpq %rdi, %rdx
; CHECK-NEXT:    sbbq %rsi, %rcx
; CHECK-NEXT:    setl %cl
; CHECK-NEXT:    subb %al, %cl
; CHECK-NEXT:    movsbq %cl, %rax
; CHECK-NEXT:    movq %rax, %rdx
; CHECK-NEXT:    sarq $63, %rdx
; CHECK-NEXT:    retq
  %cmp = call i128 @llvm.scompare.i128.i128(i128 %a, i128 %b)
  ret i128 %cmp
}

define i128 @ucmpare_i128_i128(i128 %a, i128 %b) {
; CHECK-LABEL: ucmpare_i128_i128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpq %rdi, %rdx
; CHECK-NEXT:    movq %rcx, %rax
; CHECK-NEXT:    sbbq %rsi, %rax
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    cmpq %rdx, %rdi
; CHECK-NEXT:    sbbq %rcx, %rsi
; CHECK-NEXT:    sbbb $0, %al
; CHECK-NEXT:    movsbq %al, %rax
; CHECK-NEXT:    movq %rax, %rdx
; CHECK-NEXT:    sarq $63, %rdx
; CHECK-NEXT:    retq
  %cmp = call i128 @llvm.ucompare.i128.i128(i128 %a, i128 %b)
  ret i128 %cmp
}

define <4 x i32> @scmpare_4xi32_4xi64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: scmpare_4xi32_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movdqa {{.*#+}} xmm4 = [2147483648,2147483648]
; CHECK-NEXT:    pxor %xmm4, %xmm1
; CHECK-NEXT:    pxor %xmm4, %xmm3
; CHECK-NEXT:    movdqa %xmm3, %xmm5
; CHECK-NEXT:    pcmpgtd %xmm1, %xmm5
; CHECK-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; CHECK-NEXT:    movdqa %xmm3, %xmm7
; CHECK-NEXT:    pcmpeqd %xmm1, %xmm7
; CHECK-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[1,1,3,3]
; CHECK-NEXT:    pand %xmm7, %xmm6
; CHECK-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; CHECK-NEXT:    por %xmm6, %xmm5
; CHECK-NEXT:    pcmpgtd %xmm3, %xmm1
; CHECK-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[0,0,2,2]
; CHECK-NEXT:    pand %xmm7, %xmm3
; CHECK-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; CHECK-NEXT:    por %xmm3, %xmm1
; CHECK-NEXT:    psubq %xmm5, %xmm1
; CHECK-NEXT:    pxor %xmm4, %xmm0
; CHECK-NEXT:    pxor %xmm4, %xmm2
; CHECK-NEXT:    movdqa %xmm2, %xmm3
; CHECK-NEXT:    pcmpgtd %xmm0, %xmm3
; CHECK-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; CHECK-NEXT:    movdqa %xmm2, %xmm5
; CHECK-NEXT:    pcmpeqd %xmm0, %xmm5
; CHECK-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; CHECK-NEXT:    pand %xmm5, %xmm4
; CHECK-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; CHECK-NEXT:    por %xmm4, %xmm3
; CHECK-NEXT:    pcmpgtd %xmm2, %xmm0
; CHECK-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[0,0,2,2]
; CHECK-NEXT:    pand %xmm5, %xmm2
; CHECK-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; CHECK-NEXT:    por %xmm2, %xmm0
; CHECK-NEXT:    psubq %xmm3, %xmm0
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,2]
; CHECK-NEXT:    retq
  %cmp = call <4 x i32> @llvm.scompare.v4i32.v4i64(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i32> %cmp
}

define <4 x i32> @ucmpare_4xi32_4xi64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: ucmpare_4xi32_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movdqa {{.*#+}} xmm4 = [9223372039002259456,9223372039002259456]
; CHECK-NEXT:    pxor %xmm4, %xmm1
; CHECK-NEXT:    pxor %xmm4, %xmm3
; CHECK-NEXT:    movdqa %xmm3, %xmm5
; CHECK-NEXT:    pcmpgtd %xmm1, %xmm5
; CHECK-NEXT:    pshufd {{.*#+}} xmm6 = xmm5[0,0,2,2]
; CHECK-NEXT:    movdqa %xmm3, %xmm7
; CHECK-NEXT:    pcmpeqd %xmm1, %xmm7
; CHECK-NEXT:    pshufd {{.*#+}} xmm7 = xmm7[1,1,3,3]
; CHECK-NEXT:    pand %xmm7, %xmm6
; CHECK-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; CHECK-NEXT:    por %xmm6, %xmm5
; CHECK-NEXT:    pcmpgtd %xmm3, %xmm1
; CHECK-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[0,0,2,2]
; CHECK-NEXT:    pand %xmm7, %xmm3
; CHECK-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[1,1,3,3]
; CHECK-NEXT:    por %xmm3, %xmm1
; CHECK-NEXT:    psubq %xmm5, %xmm1
; CHECK-NEXT:    pxor %xmm4, %xmm0
; CHECK-NEXT:    pxor %xmm4, %xmm2
; CHECK-NEXT:    movdqa %xmm2, %xmm3
; CHECK-NEXT:    pcmpgtd %xmm0, %xmm3
; CHECK-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[0,0,2,2]
; CHECK-NEXT:    movdqa %xmm2, %xmm5
; CHECK-NEXT:    pcmpeqd %xmm0, %xmm5
; CHECK-NEXT:    pshufd {{.*#+}} xmm5 = xmm5[1,1,3,3]
; CHECK-NEXT:    pand %xmm5, %xmm4
; CHECK-NEXT:    pshufd {{.*#+}} xmm3 = xmm3[1,1,3,3]
; CHECK-NEXT:    por %xmm4, %xmm3
; CHECK-NEXT:    pcmpgtd %xmm2, %xmm0
; CHECK-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[0,0,2,2]
; CHECK-NEXT:    pand %xmm5, %xmm2
; CHECK-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,3,3]
; CHECK-NEXT:    por %xmm2, %xmm0
; CHECK-NEXT:    psubq %xmm3, %xmm0
; CHECK-NEXT:    shufps {{.*#+}} xmm0 = xmm0[0,2],xmm1[0,2]
; CHECK-NEXT:    retq
  %cmp = call <4 x i32> @llvm.ucompare.v4i32.v4i64(<4 x i64> %a, <4 x i64> %b)
  ret <4 x i32> %cmp
}

declare i1 @llvm.scompare.i1.i32(i32, i32)
declare i1 @llvm.ucompare.i1.i32(i32, i32)
declare i8 @llvm.scompare.i8.i32(i32, i32)
declare i8 @llvm.ucompare.i8.i32(i32, i32)
declare i32 @llvm.scompare.i32.i64(i64, i64)
declare i32 @llvm.ucompare.i32.i64(i64, i64)
declare i128 @llvm.scompare.i128.i64(i64, i64)
declare i128 @llvm.ucompare.i128.i64(i64, i64)
declare i128 @llvm.scompare.i128.i128(i128, i128)
declare i128 @llvm.ucompare.i128.i128(i128, i128)
declare <4 x i32> @llvm.scompare.v4i32.v4i64(<4 x i64>, <4 x i64>)
declare <4 x i32> @llvm.ucompare.v4i32.v4i64(<4 x i64>, <4 x i64>)

